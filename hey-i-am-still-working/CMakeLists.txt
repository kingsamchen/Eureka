cmake_minimum_required(VERSION 3.20)

# Add POLICY below.

# Detect if being bundled via sub-directory.
if(NOT DEFINED PROJECT_NAME)
  set(HEY_I_AM_STILL_WORKING_NOT_SUBPROJECT ON)
else()
  set(HEY_I_AM_STILL_WORKING_NOT_SUBPROJECT OFF)
endif()

project(hey-i-am-still-working CXX)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

if(HEY_I_AM_STILL_WORKING_NOT_SUBPROJECT)
  set(CMAKE_CXX_STANDARD 17)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
  set(CMAKE_CXX_EXTENSIONS OFF)
  set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

  set(ROOT_DIR ${CMAKE_SOURCE_DIR})

  set_directory_properties(PROPERTIES VS_STARTUP_PROJECT "himsw")
endif()

# Add options below.

set(HEY_I_AM_STILL_WORKING_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(HEY_I_AM_STILL_WORKING_CMAKE_DIR ${HEY_I_AM_STILL_WORKING_DIR}/cmake)

include(${HEY_I_AM_STILL_WORKING_CMAKE_DIR}/CPM.cmake)

message(STATUS "GENERATOR = " ${CMAKE_GENERATOR})

set(HEY_I_AM_STILL_WORKING_PCH_HEADER ${HEY_I_AM_STILL_WORKING_DIR}/build/pch/precompile.h)

# Output configurations.
get_property(MULTICONF_GENERATOR GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(MULTICONF_GENERATOR)
  foreach(OUTPUTCONFIG_TYPE ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER ${OUTPUTCONFIG_TYPE} OUTPUTCONFIG)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG_TYPE}/bin)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${OUTPUTCONFIG_TYPE}/lib)
  endforeach()
else()
  if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Release")
  endif()
  message(STATUS "BUILD_TYPE = " ${CMAKE_BUILD_TYPE})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
endif()

# Compiler configurations.
string (REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
include(${HEY_I_AM_STILL_WORKING_CMAKE_DIR}/compiler_msvc.cmake)

include(${HEY_I_AM_STILL_WORKING_CMAKE_DIR}/clang_tidy.cmake)

add_subdirectory(himsw)
